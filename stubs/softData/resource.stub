<?php
namespace {{ namespace }};

use App\Models\{{ modelNamespace }};
use App\Filament\Admin\Resources\{{ resourcePath }}\{{ class }}\Pages;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Database\Eloquent\Model;
use App\Traits\Admin\Helper\SmartResourceTrait;
use App\FilamentCustom\Table\FilterWithArchive;
use App\FilamentCustom\Form\Inputs\SoftTranslatableInput;
use Filament\Resources\Resource;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Filament\Tables;
use Filament\Forms;
use Illuminate\Support\Facades\Gate;

class {{ class }} extends Resource {
    use SmartResourceTrait;

    protected static ?string $model = {{ modelName }}::class;
    protected static ?string $navigationIcon = 'heroicon-s-rectangle-group';


//    public static function canViewAny(): bool {
//        return Gate::forUser(auth()->user())->allows('view{{ modelName }}', {{ modelName }}::class) ;
//    }

//    public function view{{ modelName }}(User $user): bool {
//        return $user->can('{{ modelName }}_crm::data::manage::crm::data');
//    }

//    public static function shouldRegisterNavigation(): bool {
//        return config('crmConfig.crm-data.side-bar-menu');
//    }

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    public static function getPages(): array {
        return [
            'index' => Pages\List{{ modelNamePlural }}::route('/'),
            'create' => Pages\Create{{ modelName }}::route('/create'),
            'edit' => Pages\Edit{{ modelName }}::route('/{record}/edit'),
        ];
    }
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    public static function form(Form $form): Form {
        return $form->schema([
            Forms\Components\Section::make()->schema([
                ...SoftTranslatableInput::make()->setUniqueTable('{{ tableName }}')->getColumns(),
            ])->columnSpan(2)->columns(2),
            Forms\Components\Section::make()->schema([
                Forms\Components\Toggle::make('is_active')
                    ->label(__('default/lang.columns.is_active'))
                    ->inline(false)
                    ->default(true)
                    ->required(),
                Forms\Components\Toggle::make('is_archive')
                    ->label(__('default/lang.columns.is_archive'))
                    ->inline(false)
                    ->default(false)
                    ->required(),
            ])->columnSpan(1)->columns(2),
        ])->columns(3);
    }

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    public static function table(Table $table): Table {
        $thisLang = app()->getLocale();

        return $table
            //            ->modifyQueryUsing(fn($query) => $query->withCount('posts'))
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->label("#")
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('name.' . $thisLang)
                    ->label(__('default/lang.columns.name'))
                    ->sortable()
                    ->searchable(),
                Tables\Columns\IconColumn::make('is_active')
                    ->label(__('default/lang.columns.is_active'))
                    ->boolean()
                    ->sortable(),
                Tables\Columns\IconColumn::make('is_archive')
                    ->label(__('default/lang.columns.is_archive'))
                    ->boolean()
                    ->sortable(),

//                TextColumn::make('posts_count')
//                    ->label(__('posts_count'))
//                    ->size(TextColumnSize::Large)
//                    ->badge()
//                    ->sortable(),

            ])->filters([
                ...FilterWithArchive::make()->getColumns(),
            ])
            ->persistFiltersInSession()
            ->persistSearchInSession()
            ->persistSortInSession()
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([

            ])
            ->recordUrl(fn($record) => static::getTableRecordUrl($record))
            ->defaultSort('id', 'desc');
    }

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    public static function getRelations(): array {
        return [];
    }

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
//    public static function getNavigationGroup(): ?string {
//        return __('{{ modelPathForLang }}.navigation_group');
//    }
//    public static function getNavigationLabel(): string {
//        return __('{{ modelPathForLang }}.navigation_label');
//    }
//    public static function getModelLabel(): string {
//        return __('{{ modelPathForLang }}.model_label');
//    }
//    public static function getPluralModelLabel(): string {
//        return __('{{ modelPathForLang }}.plural_model_label');
//    }


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    public static function getRecordTitle(?Model $record): Htmlable|string|null {
        return getTranslatedValue($record->name) ?? null;
    }

}
